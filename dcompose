#!/usr/bin/env node
"use strict";

var fs          = require('fs'),
    path        = require('path'),
    DCompose    = require('./index'),
    optimist    = require('optimist')
      .usage('Usage: dcompose [options] entry')
      .check(function(argv) {
        if (argv._.length === 0) {
          throw new Error('provide entry');
        }
      })
      .option('h', {
        alias: 'help',
        boolean: true,
        describe: 'Show this message and exit'
      })
      .option('t', {
        alias: 'transform',
        describe: 'Apply transform'
      })
      .option('o', {
        alias: 'output',
        describe: 'Set output directory'
      })
      .option('js', {
        describe: 'Process only JavaScript'
      })
      .option('css', {
        describe: 'Process only CSS'
      })

var argv = optimist.argv;

if (argv.help) {
  return optimist.showHelp();
}

var composer = new DCompose({
  entries: argv._,
  transform: [].concat(argv.t).concat(argv.transform).filter(Boolean),
  extensions: [].concat(argv.extension).filter(Boolean)
});

var output = argv.output || argv.o || '.';

if (argv.js) {
  composer.js().pipe(output === '-'
    ?  process.stdout
    : fs.createWriteStream(path.join(output, 'bundle.js')));

} else if (argv.css) {
  composer.css().pipe(output === '-'
    ?  process.stdout
    : fs.createWriteStream(path.join(output, 'bundle.css')));

} else {
  var bundles = composer.all();
  ['js', 'css'].forEach(function(bundle) {
    bundles[bundle].pipe(
      fs.createWriteStream(path.join(output, 'bundle.' + bundle)));
  });
}
