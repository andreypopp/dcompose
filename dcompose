#!/usr/bin/env node
"use strict";

var common      = require('./common'),
    fs          = require('fs'),
    optimist    = require('optimist')
      .usage('Usage: dcompose [options] entry')
      .check(function(argv) {
        if (argv._.length === 0) throw new Error('provide entry');
      })
      .option('h', {
        alias: 'help',
        boolean: true,
        describe: 'Show this message and exit'
      })
      .option('d', {
        alias: 'debug',
        describe: 'Emit source maps'
      })
      .option('o', {
        alias: 'output',
        describe: 'Set output directory'
      })
      .option('js', {
        describe: 'Bundle JS dependencies only (this is the default behaviour)',
        boolean: true,
        default: true
      })
      .option('css', {
        boolean: true,
        describe: 'Bundle CSS dependencies only'
      })
      .option('all', {
        boolean: true,
        describe: 'Bundle both JS and CSS dependencies'
      })
      .option('t', {
        alias: 'transform',
        describe: 'Apply transform'
      })
      .option('extension', {
        describe: 'File extensions to treat as modules [default: .js]'
      })

var argv = optimist.argv;

if (argv.help)
  return optimist.showHelp();

var Composer = require('./index');

var composer = new Composer(argv._, {
  transform: [].concat(argv.t).concat(argv.transform).filter(Boolean),
  extensions: [].concat(argv.extension).filter(Boolean),
  debug: argv.debug
});

var output = argv.output || argv.o;

if (argv.all) {
  if (!output)
    error('provide output directory for bundle with -o/--output option');

  composer.all()
    .then(common.layoutBundle.bind(null, argv.output))
    .end();
} else if (argv.css) {
  composer.css()
    .then(function(stream) {
      var out = output ? fs.createWriteStream(output) : process.stdout;
      stream.pipe(out);
    })
    .end();
} else if (argv.js) {
  composer.js()
    .then(function(stream) {
      var out = output ? fs.createWriteStream(output) : process.stdout;
      stream.pipe(out);
    })
    .end();
}

function error(msg, code) {
  console.error('error: ' + msg);
  process.exit(msg, code || 1);
}
