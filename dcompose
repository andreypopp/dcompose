#!/usr/bin/env node
"use strict";

var common      = require('./common'),
    version     = require('./package.json').version,
    fs          = require('fs'),
    optimist    = require('optimist')
      .usage('Usage: dcompose [options] entry')
      .option('h', {
        alias: 'help',
        boolean: true,
        describe: 'Show this message and exit'
      })
      .option('v', {
        alias: 'version',
        boolean: true,
        describe: 'Print dcompose version'
      })
      .option('d', {
        alias: 'debug',
        boolean: true,
        describe: 'Emit source maps'
      })
      .option('w', {
        alias: 'watch',
        boolean: true,
        describe: 'Watch for changes and rebuild (--output should be passed)'
      })
      .option('o', {
        alias: 'output',
        describe: 'Set output directory'
      })
      .option('js', {
        describe: 'Bundle JS dependencies only',
        boolean: true
      })
      .option('css', {
        boolean: true,
        describe: 'Bundle CSS dependencies only'
      })
      .option('t', {
        alias: 'transform',
        describe: 'Apply transform'
      })
      .option('css-transform', {
        describe: 'Apply CSS transform'
      })
      .option('global-transform', {
        describe: 'Apply global transform'
      })
      .option('extension', {
        describe: 'File extensions to treat as modules [default: .js]'
      })

function error(msg, showHelp) {
  if (showHelp)
    optimist.showHelp();
  console.warn('error: ', msg);
  process.exit(1);
}

function pipe(a, b) {
  a.on('error', function(err) {
    error(err);
  });
  a.pipe(b);
}

var argv = optimist.argv;

if (argv.help)
  return optimist.showHelp();

if (argv.version)
  return console.log(version);

if (argv._.length === 0)
  error('provide bundle entry module as an argument', true);

if (argv.watch && !argv.output)
  error('provide output via -o/--output option', true);

var transform = [].concat(argv.t).concat(argv.transform);
var cssTransform = argv['css-transform'];
var globalTransform = argv['global-transform'];

var Composer = require('./index');

var composer = new Composer(argv._, {
  transform: transform,
  cssTransform: cssTransform,
  globalTransform: globalTransform,
  extensions: [].concat(argv.extension).filter(Boolean),
  debug: argv.debug,
  watch: argv.watch
});

var output = argv.output || argv.o;

function bundle() {
  var out = output ? fs.createWriteStream(output) : process.stdout;
  if (argv.js)
    pipe(composer.bundleJS(), out)
  else if (argv.css)
    pipe(composer.bundleCSS(), out)
  else
    pipe(composer.bundle(), out);
}

if (argv.watch) {
  console.log('starting to watch for source changes');
  composer.on('update', function() {
    console.log('source change detected, rebuilding bundle');
    bundle();
  });
}

bundle();
