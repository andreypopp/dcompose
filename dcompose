#!/usr/bin/env node
"use strict";

var fs          = require('fs'),
    path        = require('path'),
    optimist    = require('optimist')
      .usage('Usage: dcompose [options] entry')
      .check(function(argv) {
        if (argv._.length === 0) throw new Error('provide entry');
      })
      .option('h', {
        alias: 'help',
        boolean: true,
        describe: 'Show this message and exit'
      })
      .option('d', {
        alias: 'debug',
        describe: 'Emit source maps'
      })
      .option('o', {
        alias: 'output',
        describe: 'Set output directory'
      })
      .option('t', {
        alias: 'transform',
        describe: 'Apply transform'
      })
      .option('extension', {
        describe: 'File extensions to treat as modules (default: .js)'
      })
      .option('multi', {
        boolean: true,
        describe: 'Split bundle into multiple pieces'
      });

var argv = optimist.argv;

if (argv.help)
  return optimist.showHelp();

if (!argv.multi)
  var Composer = require('./index')
else
  var Composer = require('./multi/index');

var composer = new Composer(argv._, {
  transform: [].concat(argv.t).concat(argv.transform).filter(Boolean),
  extensions: [].concat(argv.extension).filter(Boolean),
  debug: argv.debug
});

var output = argv.output || argv.o || '.';

function onError(stream) {
  stream.on('error', function(err) {
    console.error(err.stack);
    process.exit(1);
  });
  return stream;
}

function layoutBundle(directory, streams) {
  for (var name in streams)
    streams[name]
      .pipe(fs.createWriteStream(path.join(directory, name)))
}

composer.bundle()
  .then(layoutBundle.bind(null, argv.output))
  .end();
